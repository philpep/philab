

/* Déclaration des fonctions */

void init_env(void); /* Initialise l'environnement */
char *getpwd(void); /* Retourne le repertoire courant */
char *get_prompt(void); /* Retourne le prompt */
void builtin_cd(char *path); /* La commande cd */
void external_cmd(char **argv); /* La commande d'execution */

/* La fonction d'analyse de la saisie */
void make_cmd(char *str);
/* Une petite macro utilisée dans make_cmd()
 * pour liberer la memoire */
#define FREE_ARGV() do { \
   i = 0; \
   while(argv[i] != NULL) \
   free(argv[i++]); \
} while(0)


/* 
 * Taille maximale de la saisie si
 * _USE_READLINE n'est pas definit
 */
#define SIZE 512
/* Taille maximale du nombre d'arguments */
#define MAX_ARG 10

/* Quelques constantes */
#define RUNTIME "runtime"
#define PRINT "print"
#define TRACE "trace"
#define GAUSS "gauss"
#define PW_ITER "pw_iter"
#define NORME "norme"
#define PROD "produit"
#define SUM "somme"
#define EXTENSION ".mat"


/* Structure d'une matrice chargée */
typedef struct _matrix
{
   char *name; /* Le nom (l'alias) */
   char *file; /* Le path du fichier */
   struct _matrix *next; /* C'est une liste chainée */

} matrix;

/* Strucure d'une commande philab */
typedef struct _builtin
{
   char *name; /* Le nom de la commande */
   char *description; /* Description */
   char *example; /* Un exemple d'utilisation */
   void (*f)(char *); /* La fonction a appeler (un param) */
   void (*f2)(char *, char *); /* autre fonction avec 2 param */
   void (*f3)(char *, char *, char *);  /* 3 param */
} builtin;

/* Les fonction représentées par les commande philab */
void help(char *p); /* Affiche l'aide */
void load(char *path); /* Charge une matrice */
void unload(char *name); /* Décharge une matrice */
void two_param(char *func, char *mat);
void tree_param(char *func, char *mat1, char *mat2);

void operateur(char *mat1, char *mat2, char *op);

#endif /* _INTERFACE_HEADER */
