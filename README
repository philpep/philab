#   ____  _     _ _       _     
#  |  _ \| |__ (_) | __ _| |__  
#  | |_) | '_ \| | |/ _` | '_ \ 
#  |  __/| | | | | | (_| | |_) |
#  |_|   |_| |_|_|_|\__,_|_.__/ 
#                               
#
# Philab est un logiciel de calcul matriciel
# minimaliste. Le moteur de calcul est codé en
# fortran et l'interface en C. Toutes fois l'interface
# est optionnelle et on peut exécuter toutes les
# opérations directement avec le programme fortran.
#
# J'ai codé philab en utilisant le gestionnaire de
# version git. Pour voir les différentes étapes du
# code, il y a un gitweb ici : http://git.philpep.org/philab.git
# Pour récupérer la dernière version de philab :
# git clone git://git.philpep.org/philab.git
#
# Pour m'envoyer un patch commitez vos changements :
# git commit -a -m "Votre message de commit"
# Puis générez un patch :
# git format-patch -M origin
# Et envoyez le patch par mail
#
# Attention, le serveur est hébergé (pour le moment) sur mon petit
# portable qui n'est pas allumé 24h/24 :-) , donc il
# est possible que philpep.org soit parfois down.
#
# Contact : Philippe Pepiot <philux@tuxfamily.org>
# 			    <philippe.pepiot@gmail.com>
# 			    <mapi13@cict.fr>
# 			    <root@philpep.org>
#
# Toute partie du code peut être librement modifiée et
# redistribuée suivant les termes de la licence BSD que voici :
#

# Copyright (c) 1998, Regents of the University of California
# All rights reserved.
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the University of California, Berkeley nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE REGENTS AND CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#
#
#
# Compilation :
# Munissez vous d'un shell confortable (J'entends par
# là que /bin/sh doit être un lien vers un shell
# valable, bash, dash ou zsh sont largement suffisants).
# Les dépendances sont les suivantes :
# - gfortran : le compilateur GNU est obligatoire car j'utilise
#              certaines extensions propres à gfortran.
# - gcc : Pour compiler l'interface en C (je pense que tout autre compilateur C ferra l'affaire)
# - Les bibliothèques standard du C (apt-get install build-essential sur Debian)
# - la bibliothèque readline (optionnelle) : elle permet d'avoir de la complétion avec l'interface C
#                                            (apt-get install libreadline-dev sur Debian)
#
# Et exécutez le script de configuration :
# ./configure
#
# Cette commande générera le Makefile qui va bien dans
# le répertoire courant.
# Ensuite compilez :
# make
#
# Et exécutez :
# ./philab
#
# La commande help permet d'avoir un rapide descriptif
# de ce qu'il est possible de faire avec philab.
#
#
# Des matrices d'exemples sont dans examples/
# LES MATRICES DOIVENT ABSOLUMENT AVOIR L'EXTENSION .mat !!!
# Il y a un format de matrice a respecter :
# Pour les matrices creuse :
# 	- 1ère ligne : C
# 	- 2ème ligne : nombre d'éléments non nuls
# 	- Ensuite renter les données sous la forme
# 	  num_ligne num_colonne valeur,  par exemple '2 3 5'
# 	  veut dire qu'il y a un 5 à la 2ème ligne 3ème colonne
#
# Pour les matrices entières :
# 	- 1ère ligne : I (pour Integer)
# 	- 2ème ligne : les dimensions de la matrices par exemple
# 	  '2 3' veut dire une matrice a 2 lignes et 3 colonnes
# 	- Ensuite les valeurs lignes par ligne. Exemple '1 2 3'
#
#
#
# Pour utiliser le programme sans l'interface il faut le lancer comme ceci :
# ./runtime fonction fichier_matrices [fichier de sortie]
#
# Le fichier de sortie est interprété seulement pour les fonctions
# somme et produit, dans ce dernier cas s'il n'est pas spécifié
# il sera le fichier 'ans.mat'
#
# Les fonctions philab sont celles ci :
# print A.mat ---> Affiche la matrice A sur stdout
# somme A.mat B.mat C.mat ---> Met la somme A+B dans le fichier C.mat (rien n'est affiché sur stdout)
# produit A.mat B.mat C.mat ---> Met le produit matriciel A*B dans le fichier C.mat (rien sur stdout)
# trace A.mat ---> Affiche la trace de A sur stdout
# norme 1 A.mat ---> Affiche la norme 1 de la matrice sur stout
# norme inf A.mat ---> Affiche la norme infinie de la matrice sur stout
# norme fro A.mat ---> Affiche la norme de frobenius de la matrice sur stdout
# gauss C.mat D.mat ---> Affiche la solution du système Cx = D sur stdout
# pw_iter E.mat F.mat ---> Affiche la plus grande valeur propre de E avec par la méthode de la puissance itérée avec F comme premier vecteur (nombre d'itération = 10000)
#
# Les matrices données en exemple sont dans example/
# A est une matrice creuse
# B une matrice integer
# La méthode de gauss sur C et D marche bien :-)
# La méthode de la puissance itérée sur E et F aussi :-)
#
# Si vous utilisez l'interface en C la liste des commandes
# peut être obtenue en tapant 'help'
#
# Fonctionnement général de l'interface :
# Pour pouvoir effectuer des calculs sur une matrice, la matrice
# doit être chargée :
# load /path/de/votre/matrice/foo.mat
#
# Ici la matrice s'appellera 'foo' (c'est une sorte d'alias).
# Voici une session classique de philab :
# load examples/C.mat
# load examples/D.mat
# gauss C D
# load examples/E.mat
# load examples/F.mat
# pw_iter E F
# C + E
# C * E
# E * C
# norme 1 C
# norme inf E
# load examples/A.mat
# norme fro A
# exit   ! Les commandes exit ou quit permettent de quitter philab
#
# Par defaut, les matrices exportés sont dans le fichier 'ans.mat' (accessible via l'alias 'ans')
# Si vous voulez exporter des matrices avec des noms personnalisés faites par exemple :
# C * E > H.mat   ! ATTENTION : l'extension .mat est obligatoire ici car
# je n'ai pas encore codé cette fonctionnalité comme il faut.
# La matrice H.mat sera alors automatiquement chargée avec comme alias 'H'
#
# L'interface permet aussi de lancer les commandes shells les plus utiles :
# mkdir, cd, rm, cp, mv, ls, pwd, vim, emacs, cat
# Les options passent très bien si elle ne sont pas trop complexes :
# ls -l
# vim -t main fichier.c
# ...
#
# Par contre les petites choses comme *"'`\[><]{};&$^ ne seront pas interprétés,
# philab n'est pas un shell (par contre si ça vous intéresse j'ai aussi écris un shell
# disponible ici : http://tux-atome.fr/philsh.git , toutes les contributions
# sont les bienvenues :-)
#
# ATTENTION IL Y A DES BUGS CONNUS : Voyez le fichier BUGS
# Les fonctions load et unload ne sont pas encore totalement fonctionnelles, n'en
# abusez pas trop :-)
# 
# Il y a aussi une TODO list dans le fichier TODO
#
#
# Message pour mon prof de fortran :
#
# Je suis conscient que mon projet ne répond pas exactement à vos demandes,
# en particulier si on utilise pas l'interface en C. En fait une grosse partie
# du code de runtime.f90 a été faite pour pouvoir faire cette interface facilement.
# C'est pourquoi le programme fortran seul n'est pas interactif et peu sympathique à
# utiliser. Je n'ai pas fais l'interface en fortran car je ne trouve pas que ce
# soit un langage pratique pour le maniement complexe de chaînes de caractères (et
# aussi parce que je connais mieux le C).
# De plus je trouve que séparer clairement l'interface du "moteur de calcul" est une
# bonne idée car il permet de diversifier les interface (On pourrais écrire une autre
# interface dans un autre langage ou encore faire une interface graphique).
#
# Je n'ai pas codé pour tous les types. le programme fortran ne gère que les matrice 
# creuses entières et les matrices entières. En effet le programme comportant à peu près
# 15 fonctions sur lesquelles le type est une dépendance. Rajouter un seul type
# revient à ré écrire 15 fonctions (dont seul le nom change). Ce qui peut nuire
# à mes doigts, à mon clavier, au compilateur et à votre lecture :-).
#
# Pour le gestion des types le langage C offre des possibilités avec les unions,
# on peut faire une sorte de structure dont tous les éléments partagent un
# même segment de mémoire, le but étant bien sûr de n'utiliser qu'un seul élément
# de la structure. On peut ainsi créer un type de type économe en mémoire (la taille
# est donnée par la taille du plus grand élément) que l'on
# peut envoyer à nos fonctions. Ensuite avec stdarg.h (et les va_list) on peut
# faire des tests sur les types, mais je ne connais pas trop cette bibliothèque.
# Je ne connais pas encore parfaitement le fortran, mais peut être si le programme
# devient un peu plus gros, le ré écrire en C le rendra plus facile à maintenir et surtout
# plus lisible.
